// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package transport

import (
	"time"

	"gonum.org/v1/gonum/num/quat"
	"gonum.org/v1/gonum/spatial/r3"
)

func (avt *AtomicFloat64Transport) PubView() *AtomicFloat64Pub {
	return &AtomicFloat64Pub{avt}
}

func (avt *AtomicFloat64Transport) SubView() *AtomicFloat64Sub {
	return &AtomicFloat64Sub{avt}
}

type AtomicFloat64Pub struct {
	transport *AtomicFloat64Transport
}

func (avp *AtomicFloat64Pub) Update(value float64) {
	avp.transport.Update(value)
}

func (avp *AtomicFloat64Pub) UpdateTimed(value float64, sourced time.Time) {
	avp.transport.UpdateTimed(value, sourced)
}

type AtomicFloat64Sub struct {
	transport *AtomicFloat64Transport
}

func (avs *AtomicFloat64Sub) EnsureReady(timeout time.Duration, interval time.Duration) error {
	return avs.transport.EnsureReady(timeout, interval)
}

func (avs *AtomicFloat64Sub) Access() float64 {
	return avs.transport.Access()
}

func (avs *AtomicFloat64Sub) AccessTimed() (float64, EventTimings) {
	return avs.transport.AccessTimed()
}

func (avt *AtomicR3VecTransport) PubView() *AtomicR3VecPub {
	return &AtomicR3VecPub{avt}
}

func (avt *AtomicR3VecTransport) SubView() *AtomicR3VecSub {
	return &AtomicR3VecSub{avt}
}

type AtomicR3VecPub struct {
	transport *AtomicR3VecTransport
}

func (avp *AtomicR3VecPub) Update(value r3.Vec) {
	avp.transport.Update(value)
}

func (avp *AtomicR3VecPub) UpdateTimed(value r3.Vec, sourced time.Time) {
	avp.transport.UpdateTimed(value, sourced)
}

type AtomicR3VecSub struct {
	transport *AtomicR3VecTransport
}

func (avs *AtomicR3VecSub) EnsureReady(timeout time.Duration, interval time.Duration) error {
	return avs.transport.EnsureReady(timeout, interval)
}

func (avs *AtomicR3VecSub) Access() r3.Vec {
	return avs.transport.Access()
}

func (avs *AtomicR3VecSub) AccessTimed() (r3.Vec, EventTimings) {
	return avs.transport.AccessTimed()
}

func (avt *AtomicQuatNumberTransport) PubView() *AtomicQuatNumberPub {
	return &AtomicQuatNumberPub{avt}
}

func (avt *AtomicQuatNumberTransport) SubView() *AtomicQuatNumberSub {
	return &AtomicQuatNumberSub{avt}
}

type AtomicQuatNumberPub struct {
	transport *AtomicQuatNumberTransport
}

func (avp *AtomicQuatNumberPub) Update(value quat.Number) {
	avp.transport.Update(value)
}

func (avp *AtomicQuatNumberPub) UpdateTimed(value quat.Number, sourced time.Time) {
	avp.transport.UpdateTimed(value, sourced)
}

type AtomicQuatNumberSub struct {
	transport *AtomicQuatNumberTransport
}

func (avs *AtomicQuatNumberSub) EnsureReady(timeout time.Duration, interval time.Duration) error {
	return avs.transport.EnsureReady(timeout, interval)
}

func (avs *AtomicQuatNumberSub) Access() quat.Number {
	return avs.transport.Access()
}

func (avs *AtomicQuatNumberSub) AccessTimed() (quat.Number, EventTimings) {
	return avs.transport.AccessTimed()
}
