// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Package transport implements high-performance abstractions for sharing data between goroutines.
package transport

import (
	"time"

	"gonum.org/v1/gonum/num/quat"
	"gonum.org/v1/gonum/spatial/r3"
)

type TimedFloat64 struct {
	Value   float64
	Timings EventTimings
}

// Interface for publishers; analogue of chan<- float64
type Float64Pub interface {
	Update(value float64)
	UpdateTimed(value float64, source time.Time)
}

// Interface for subscribers; analogue of <-chan float64
type Float64Sub interface {
	EnsureReady(interval time.Duration, timeout time.Duration) error
	Access() float64
	AccessTimed() (float64, EventTimings)
}

var _ Float64Pub = (*AtomicFloat64Transport)(nil)
var _ Float64Sub = (*AtomicFloat64Transport)(nil)

// Package transport implements high-performance abstractions for sharing data between goroutines.

type TimedInt struct {
	Value   int
	Timings EventTimings
}

// Interface for publishers; analogue of chan<- int
type IntPub interface {
	Update(value int)
	UpdateTimed(value int, source time.Time)
}

// Interface for subscribers; analogue of <-chan int
type IntSub interface {
	EnsureReady(interval time.Duration, timeout time.Duration) error
	Access() int
	AccessTimed() (int, EventTimings)
}

var _ IntPub = (*AtomicIntTransport)(nil)
var _ IntSub = (*AtomicIntTransport)(nil)

// Package transport implements high-performance abstractions for sharing data between goroutines.

type TimedR3Vec struct {
	Value   r3.Vec
	Timings EventTimings
}

// Interface for publishers; analogue of chan<- r3.Vec
type R3VecPub interface {
	Update(value r3.Vec)
	UpdateTimed(value r3.Vec, source time.Time)
}

// Interface for subscribers; analogue of <-chan r3.Vec
type R3VecSub interface {
	EnsureReady(interval time.Duration, timeout time.Duration) error
	Access() r3.Vec
	AccessTimed() (r3.Vec, EventTimings)
}

var _ R3VecPub = (*AtomicR3VecTransport)(nil)
var _ R3VecSub = (*AtomicR3VecTransport)(nil)

// Package transport implements high-performance abstractions for sharing data between goroutines.

type TimedQuatNumber struct {
	Value   quat.Number
	Timings EventTimings
}

// Interface for publishers; analogue of chan<- quat.Number
type QuatNumberPub interface {
	Update(value quat.Number)
	UpdateTimed(value quat.Number, source time.Time)
}

// Interface for subscribers; analogue of <-chan quat.Number
type QuatNumberSub interface {
	EnsureReady(interval time.Duration, timeout time.Duration) error
	Access() quat.Number
	AccessTimed() (quat.Number, EventTimings)
}

var _ QuatNumberPub = (*AtomicQuatNumberTransport)(nil)
var _ QuatNumberSub = (*AtomicQuatNumberTransport)(nil)
